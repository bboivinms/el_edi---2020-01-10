using EDI_850.Properties;
using EDI_850.Helpers;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using EDI_DB.Data;
using static EDI_DB.Data.Base;

namespace EDI_850.Schema
{

    /// <summary>
    /// Partial classes that augment the classes generated by the XSD2Code tool, which generates code
    /// based on an XML Schema Definition file.
    /// 
    /// Used to validate the data read from the XML file, and to add properties as needed, for example STAddress, BTAddress and so on.
    /// 
    /// At the end of the validation process, all the properties have valid values, or the corresponding message is generated, and a "IsValid"
    /// flag is set false.
    /// </summary>

    public partial class root
    {
        public void Validate()
        {
            Resources.Culture = System.Globalization.CultureInfo.GetCultureInfo("fr");

            //Add navigation properties to the XML tree of objects so that child objects can have a pointer to their parent object.
            //This is needed because the XSD2Code tool doesn't generate those navigation properties
            BuildUp();

            Customer.Validate();
            Order.Validate();

        }

        private void BuildUp()
        {
            Customer.Root = this;
            Order.Root = this;

            Order.OrderItem.ForEach(o => o.RootOrder = Order);

            Order.Setup();
        }
    }

    public partial class rootCustomer
    {
        public bool IsValid { get => !Messages.Any(m => m.Severity == Severity.Critical); }

        public List<Message> Messages { get; set; }
        public root Root { get; set; }

        public string CustCode { get; set; }
        public string BTName { get; set; }
        public string BTAddress { get; set; }
        public string STAddress { get; set; }
        public int ST_IDDEL_ADDR { get; set; }
        public bool STInvalid { get; set; }

        public string BYName { get; set; }
        public string BYFax { get; set; }
        public string BYEmail { get; set; }

        public void Validate()
        {
            Messages = new List<Message>();
            arclient_ident = Id;

            //Validate and Set Customer Bill-To information
            SetCustomerBT();

            // Get Buyer information
            BYName  = GetBY("BD"); // Buyer Name or Department
            BYFax   = GetBY("FX"); // Facsimile (FAX)
            BYEmail = GetBY("EM"); // Electronic Mail

            if (BYEmail == "" && BYFax.Contains("@")) { BYEmail = BYFax; BYFax = ""; }

            //Validate Customer ShipTo address
            SetCustomerSTAddress();
            
            if (string.IsNullOrEmpty(STAddress) && string.IsNullOrEmpty(BTAddress))
            {
                Messages.Add(new Message { Text = $"<STRONG style='color:red'>{Resources.CustSTNotFound}: {arclient_ident}</STRONG>", Severity = Severity.Critical, Scope = Scope.Internal });
            }

        }

        private bool? SetCustomerBT()
        {
            string Address = string.Empty;

            DB_VIVA.Params.Clear();
            DB_VIVA.Params.Add("?id", arclient_ident.ToString());

            IDataRecord result = DB_VIVA.GetAddressBT(arclient_ident);

            if (result == null) { SetBTError();  return null; }

            BTName = result["name"].ToString();
            BTAddress = result["address"].ToString();
            CustCode = result["code"].ToString();
            return true;
        }

        private void SetBTError()
        {
            Messages.Add(new Message { Text = $"<STRONG style='color:red'>{Resources.InvalidCustId}: {arclient_ident}</STRONG>", Severity = Severity.Critical, Scope = Scope.Internal });
            Messages.Add(new Message { Text = $"<STRONG style='color:red'>{Resources.CustBTNotFound}: {arclient_ident}</STRONG>", Severity = Severity.Critical, Scope = Scope.Internal });
        }

        private void SetCustomerSTAddress()
        {
            if (Root.Order.IsPickup)
            {
                ST_IDDEL_ADDR = 11768;
                STName = "PICK-UP PAR ARIVA";
                STAddress = "";
                STAddress1 = "";
                STAddress2 = "";
                STCity = "";
                STCountry = "";
                STPostalCode = "";
                STState = "";
                return;
            }

            string STZip = STPostalCode.ToUpper().Replace(" ", "");

            IDataRecord DataAddress = DB_VIVA.GetAddressST(arclient_ident, STPostalCode);

            if (Root.Order.sMSG != "")
            {
                Root.Order.sMSG = Root.Order.sMSG;
            }

            if (DataAddress != null)
            {
                ST_IDDEL_ADDR = Convert.ToInt32(DataAddress["iddel_addr"].ToString());
                STAddress = DataAddress["address"].ToString();
                STName = DataAddress["name"].ToString();
            }
            else
            {
                STInvalid = true;

                StringBuilder addr = new StringBuilder();

                addr.Append($"{STAddress1}<br>");
                if (!string.IsNullOrEmpty(STAddress2)) addr.Append($"{STAddress2}<br>");
                addr.Append($"{STCity} (");
                addr.Append($"{STState})<br>");
                addr.Append($"{STCountry}<br>");
                addr.Append($"{STPostalCode}<br>");

                Messages.Add(new Message { Text = $"<STRONG style='color:red'>{Resources.CustSTNotFound}: {BTName}, {Resources.UseBT}. {Resources.NewSTAddress}<br>{addr.ToString()}</STRONG>", Severity = Severity.Warning, Scope = Scope.Internal });

                ST_IDDEL_ADDR = Convert.ToInt32("4" + arclient_ident.ToString());
                STAddress = BTAddress;
            }

        }

        private string GetBY(String find)
        {
            if (PER01 == find) return PER02;
            if (PER03 == find) return PER04;
            if (PER05 == find) return PER06;
            if (PER07 == find) return PER08;
            return "";
        }

    }

    public partial class rootOrder
    {
        public bool IsValid { get => !Messages.Any(m => m.Severity == Severity.Critical); }
        public List<Message> Messages { get; set; }
        public root Root { get; set; }

        public string sMSG { get; set; }

        public System.DateTime ActualShipDate { get; set; }
        public System.DateTime ActualShipDate1 { get; set; }
        public System.DateTime ActualShipDate2 { get; set; }

        public bool HasActualShipDate1 { get; set; }
        public bool HasActualShipDate2 { get; set; }

        public bool IsPickup { get; set; }
                
        public void Setup()
        {
            sMSG = string.Join("\r\n", MSG.ToArray());
            IsPickup = SetPickup();
        }

        public void Validate()
        {
            Messages = new List<Message>();

            HasActualShipDate1 = false;
            HasActualShipDate2 = false;

            /*Validate Order information*/
            
            //Validate PO Number
            if (string.IsNullOrEmpty(Number))
            {
                Messages.Add(new Message { Text = $"<STRONG style='color:red'>{Resources.EmptyPO}</STRONG>", Severity = Severity.Warning });
            }

            //Validate order date
            if (Date != DateTime.Today)
            {
                Messages.Add(new Message { Text = $"<STRONG style='color:red'>{Resources.PODateMismatch}: {Number}</STRONG>", Severity = Severity.Warning });
            }

            //Validate requested ship date. If today, but after noon, bump by one "work" day

            // KJ: 2018-11-05: MSG from Bruno: For Ariva: Ship today, except if after 11:05am, ship next day
            // KJ: 2018-11-23: Ship one extra day if stock is in Magog
            ActualShipDate1 = Base.SkipWeekendsAndHolidays(DateTime.Today);

            // if (ActualShipDate1 == DateTime.Today && (DateTime.Now.Hour > 12 || (DateTime.Now.Hour == 11 && DateTime.Now.Minute > 5)))
            // KJ: 2018-12-06: MSG from Kim: For Ariva: Date is Today if it is a Pickup + Workday
            if (ActualShipDate1 == DateTime.Today && (Base.TimePassed(11, 05) && !Root.Order.IsPickup))
            {
                ActualShipDate1 = Base.SkipWeekendsAndHolidays(ActualShipDate1.AddDays(1));
            }

            ActualShipDate2 = Base.SkipWeekendsAndHolidays(DateTime.Today);
            
            // if (ActualShipDate2 == DateTime.Today && (DateTime.Now.Hour > 16 || (DateTime.Now.Hour == 15 && DateTime.Now.Minute > 30)))
            if (ActualShipDate2 == DateTime.Today && Base.TimePassed(15, 30)) 
            {
                ActualShipDate2 = Base.SkipWeekendsAndHolidays(ActualShipDate2.AddDays(1));
            }

            ActualShipDate2 = Base.SkipWeekendsAndHolidays(ActualShipDate2.AddDays(1));

            //Check if requested date is in the past. If it is, set it to the next work day
            if (RequestedShipDate < DateTime.Today)
            {
                Messages.Add(new Message { Text = $"<STRONG style='color:red'>{Resources.POReqDate}: {Number} {Resources.POInPast}.</STRONG>", Severity = Severity.Warning });
            }

            //Validate Order Items information
            OrderItem.ForEach(o => o.Validate());

            // Use ActualShipDate wherever one ship day is required, and we cannot have multiple instances
            // Default is ActualShipDate1
            ActualShipDate = ActualShipDate1;
            if (HasActualShipDate2 && !HasActualShipDate1) ActualShipDate = ActualShipDate2;

        }

        public bool SetPickup()
        {
            string MSG = " " + sMSG.ToUpper().Replace(@"\", "/") + " ";

            if (MSG.Contains(" PICKUP ")) return true;
            if (MSG.Contains(" PICK UP ")) return true;
            if (MSG.Contains(" PICK-UP ")) return true;
            if (MSG.Contains(" PU ")) return true;
            if (MSG.Contains(" P/U ")) return true;
            if (MSG.Contains(" P /U ")) return true;
            if (MSG.Contains(" P / U ")) return true;
            if (MSG.Contains(" P/ U ")) return true;

            return false;
        }
    }


    public partial class rootOrderOrderItem
    {
        public bool IsValid { get => !Messages.Any(m => m.Severity == Severity.Critical); }
        public List<Message> Messages { get; set; }

        public bool ShouldSerializeRootOrder() { return false; }
        public rootOrder RootOrder { get; set; }
        public int? IdProd { get; set; }
        public decimal ItemUnitConversion { get; set; }
        public string ELProdCode { get; set; }

        public decimal QtyInStock { get; set; }
        public decimal QtyInStockEnvl { get; set; }
        public decimal AdjustedQty { get; set; }
        public int QtyPerPallet { get; set; }
        public int ActualShipDateNumber { get; set; }

        public decimal ItemBasePrice { get; set; }
        public decimal PalletBasePrice { get; set; }
        public decimal CustomerItemDiscount { get; set; }
        public decimal CustomerBaseDiscount { get; set; }
        public decimal CustomerPalletDiscount { get; set; }

        public decimal AdjustedItemPrice { get; set; }
        public decimal AppliedDiscount { get; set; }

        public decimal AdjustedItemTotal { get; set; }

        public string ItemStatus { get; set; }
        public string ItemSup { get; set; }

        public void Validate()
        {
            Messages = new List<Message>();

            ItemStatus = "";
            ItemSup = "";

            /*Validate the important fields*/

            //Get the product Id based on Product code. Stop validation if the Id can't be found
            IdProd = GetItemId();
            if (!IdProd.HasValue)
            {
                Status = "B";
                ItemStatus += Resources.ItemStatusNotFound;
                return;
            }

            ValidateItemUnits();

            ValidateItemPricing();

            ValidatePalletQty();

            ValidateStock();

            AdjustFinalItemPrice();
            
            if(ItemStatus.Trim() == "") ItemStatus = "OK";
        }

        private void ValidateItemUnits()
        {
            Dictionary<string, (string unit, decimal conv)> UnitMappings;
            UnitMappings = new Dictionary<string, (string unit, decimal conv)>();
            UnitMappings.Add("TP", (unit: "/Mille", conv: 1000.0m));
            UnitMappings.Add("QS", (unit: "/Mille", conv: 1000.0m));
            UnitMappings.Add("UN", (unit: "/Un", conv: 1.0m));
            UnitMappings.Add("UM", (unit: "/Mille", conv: 1000.0m));

            string key = ItemUnitOfPrice;

            ItemUnitOfPrice = UnitMappings[key].unit;
            ItemUnitConversion = UnitMappings[key].conv;

        }

        private void ValidateItemPricing()
        {

            MySqlCommand cmd;

            // Get the item base price
            cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT web_prix FROM ivprod WHERE ident = ?idprod";
            cmd.Parameters.AddWithValue("?idprod", IdProd);

            object result = cmd.ExecuteScalar();

            if (result != DBNull.Value && result != null)
                ItemBasePrice = (decimal?)result ?? 0;
            else
                ItemBasePrice = 0;

            if (ItemBasePrice == 0)
            {
                Messages.Add(new Message { Text = $"<STRONG style='color:red'>Item {ItemLineId}: {Resources.PriceNotFound}</STRONG>", Severity = Severity.Warning, Scope = Scope.Internal });
            }

            // Get the pallet base price
            cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT web_prixpal FROM ivprod WHERE ident = ?idprod";
            cmd.Parameters.AddWithValue("?idprod", IdProd);

            result = cmd.ExecuteScalar();

            if (result != DBNull.Value && result != null)
                PalletBasePrice = (decimal?)result ?? 0;
            else
                PalletBasePrice = 0;

            if (PalletBasePrice == 0)
            {
                // KJ: 2018-11-05: MSG from Kim: Remove message of PalletPriceNotFound
                // Messages.Add(new Message { Text = $"<STRONG style='color:red'>Item {ItemLineId}: {Resources.PalletPriceNotFound}</STRONG>", Severity = Severity.Warning, Scope = Scope.Internal });
            }

            // Get the customer item discount
            cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT taux FROM ivprixdcli WHERE idclient = ?arclient_ident AND idprod = ?idprod";
            cmd.Parameters.AddWithValue("?arclient_ident", arclient_ident);
            cmd.Parameters.AddWithValue("?idprod", IdProd);

            result = cmd.ExecuteScalar();

            if (result != DBNull.Value && result != null)
                CustomerItemDiscount = ((decimal?)result ?? 0) / 100M;
            else
                CustomerItemDiscount = 0;

            // Get the customer base discount
            cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT esclp FROM arclient WHERE ident = ?arclient_ident";
            cmd.Parameters.AddWithValue("?arclient_ident", arclient_ident);

            result = cmd.ExecuteScalar();

            if (result != DBNull.Value && result != null)
                CustomerBaseDiscount = ((Int16?)result ?? 0) / 100M; //100M is a decimal literal, making sure the division will not be truncated becuase of the Int16
            else
                CustomerBaseDiscount = 0;

            // Get the customer pallet discount
            cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT tauxpal FROM ivprixdcli WHERE idclient = ?arclient_ident AND idprod = ?idprod";
            cmd.Parameters.AddWithValue("?arclient_ident", arclient_ident);
            cmd.Parameters.AddWithValue("?idprod", IdProd);

            result = cmd.ExecuteScalar();

            if (result != DBNull.Value && result != null)
                CustomerPalletDiscount = ((decimal?)result ?? 0) / 100M;
            else
                CustomerPalletDiscount = 0;

        }

        private void ValidatePalletQty()
        {

            //Find out if item comes in pallets. This is used to adjust the item price based on the qty ordered.
            MySqlCommand cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT FLOOR(IF(IFNULL(web_qtepal, 0) > 0, web_qtepal, qtyctns)) AS qtyctns FROM ivprod WHERE ident = ?idprod";
            cmd.Parameters.AddWithValue("?idprod", IdProd);

            object result = cmd.ExecuteScalar();

            if (result != DBNull.Value && result != null)
                QtyPerPallet = Convert.ToInt32(result);
            else
                QtyPerPallet = 0;

            if (QtyPerPallet == 0)
            {
                ItemSup += "(9) ";
                Messages.Add(new Message { Text = $"<STRONG style='color:red'><sup>9</sup>Item {ItemLineId}: {Resources.PalletQtyZero}</STRONG>", Severity = Severity.Warning, Scope = Scope.Internal });
            }

        }

        private void ValidateStock()
        {
            //1. Obtenir la qty totale pour l'item en cours, et ce dans toutes les warehouses
            MySqlCommand cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = @"SELECT SUM(qty) AS TotalQty, SUM(IF(ivqty.idwareh = 1 OR ivqty.idwareh = 33, qty, 0)) AS TotalQtyEnvl 
                                FROM ivqty
                                LEFT JOIN ivloc ON ivqty.idwareh = ivloc.idwareh AND ivqty.location = ivloc.code
                                WHERE ivqty.idwareh <> 18 AND ivqty.idwareh <> 16 AND ivloc.prod <> 1 AND idprod = ?idprod";

            cmd.Parameters.AddWithValue("?idprod", IdProd);

            List<IDataRecord> DBresult;

            MySqlDataReader rd = cmd.ExecuteReader();
            DBresult = rd.Cast<IDataRecord>().ToList();
            rd.Close();

            decimal TotalQty = Base.GetDecimal(DBresult[0]["TotalQty"]);
            decimal TotalQtyEnvl = Base.GetDecimal(DBresult[0]["TotalQtyEnvl"]);

            //2. Obtenir la qty dans toutes les warehouses, mais cette fois seulement pour les items marqués "en production"
            //   KJ: 2018-11-23: Modifier pour être exclus dans le #1

            //3. Obtenir la qty dans tous les COBILI dont statut est "E" ou "W" (items déjà cédulés pour shipping)
            //   KJ: 2018-11-23:    Cobili does not store the idwareh. This can include inventory in idwareh 18 and idwareh 16.
            //                      It also cannot be determine if the idwareh is in Montreal (Envl) or in Magog.
            //                      The quantity will first be removed from Envl for same day delivery check
            cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT SUM(qty) FROM cobili LEFT JOIN cobil ON cobili.idcobil = cobil.ident WHERE cobili.idprod = ?idprod AND (cobil.statut = 'W' OR cobil.statut = 'E')";
            cmd.Parameters.AddWithValue("?idprod", IdProd);

            object result = cmd.ExecuteScalar();
            decimal? InShippingQty;

            if (result != DBNull.Value && result != null)
                InShippingQty = (decimal?)result ?? 0;
            else
                InShippingQty = 0;

            //4. Obtenir la qty dans tous les COBILI sur le "253", donc de ce qui est cédulé pour shipping, mais qui n'a
            //   pas encore été processé par le "form cobil" de VIVA.

            // consider status "W" or "E" only
            cmd = DB_VIVA.conn.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT SUM(qty) FROM cobili LEFT JOIN cobil ON cobili.idcobil = cobil.ident WHERE cobili.idprod = ?idprod AND (cobil.statut = 'W' OR cobil.statut = 'E')";
            cmd.Parameters.AddWithValue("?idprod", IdProd);

            result = cmd.ExecuteScalar();
            decimal? InWaitFormCobilQty;

            if (result != DBNull.Value && result != null)
                InWaitFormCobilQty = (decimal?)result ?? 0;
            else
                InWaitFormCobilQty = 0;

            // La qty en stock sera donc "1 - 3 - 4"
            QtyInStock = TotalQty - InShippingQty.Value - InWaitFormCobilQty.Value;
            QtyInStockEnvl = TotalQtyEnvl - InShippingQty.Value - InWaitFormCobilQty.Value;

            if (ItemQuantity > QtyInStock)
            {
                ItemStatus += Resources.ItemStatusNotInStock;
                ItemSup += "(8) ";
                Messages.Add(new Message { Text = $"<STRONG style='color:red'><sup>8</sup>Item {ItemLineId}: {Resources.ProdCode}  {ItemId} {Resources.ItemStatusNotInStock}</STRONG>", Severity = Severity.Warning, Scope = Scope.Customer });

                ActualShipDateNumber = 0;
            }
            else if(ItemQuantity > QtyInStockEnvl && (RootOrder.Root.Order.ActualShipDate1 != RootOrder.Root.Order.ActualShipDate2))
            {
                ActualShipDateNumber = 2;
                RootOrder.Root.Order.HasActualShipDate2 = true;
            }
            else
            {
                ActualShipDateNumber = 1;
                RootOrder.Root.Order.HasActualShipDate1 = true;
            }

        }

        private void AdjustFinalItemPrice()
        {
            AppliedDiscount = 0M;
            AdjustedItemPrice = 0M;
            AdjustedQty = 0M;

            if (QtyPerPallet == 0)
            {
                //If the item doesn't come in pallets, then only the base price and discount can apply.
                //Also, the number of items doesn't have to be adjusted to pallet quantity

                AdjustedQty = ItemQuantity;
                AdjustedItemPrice = ItemBasePrice;

                //Calculate the adjusted rate based on the various base prices and discounts

                if (CustomerItemDiscount != 0)
                {
                    AppliedDiscount = CustomerItemDiscount;
                }
                else if (CustomerBaseDiscount != 0)
                {
                    AppliedDiscount = CustomerBaseDiscount;
                }

            }
            else
            {
                //If the item does come in pallet, then we have to verify multiple factors to determine
                //the final quantity and discounts applicable

                //Determine the number of pallets and "loose" items
                long NumPallet = ItemQuantity / QtyPerPallet;
                long LooseItems = ItemQuantity % QtyPerPallet;


                //1. Do we have an exact number of pallets?
                if (NumPallet > 0 && LooseItems == 0)
                {
                    AdjustedQty = ItemQuantity;
                    AdjustedItemPrice = PalletBasePrice != 0 ? PalletBasePrice : ItemBasePrice;

                    if (CustomerPalletDiscount != 0)
                    {
                        AppliedDiscount = CustomerPalletDiscount;
                    }
                    else if (CustomerItemDiscount != 0)
                    {
                        AppliedDiscount = CustomerItemDiscount;
                    }
                    else if (CustomerBaseDiscount != 0)
                    {
                        AppliedDiscount = CustomerBaseDiscount;
                    }
                }

                //2. Do we have more than a pallet, but not an exact number of pallets, and is the PO price the same as the pallet price?
                if (NumPallet > 0 && LooseItems > 0 && ItemRate == PalletBasePrice)
                {
                    //Adjust qty to superior pallet
                    AdjustedQty = (NumPallet + 1) * QtyPerPallet;
                    AdjustedItemPrice = PalletBasePrice != 0 ? PalletBasePrice : ItemBasePrice;

                    if (CustomerPalletDiscount != 0)
                    {
                        AppliedDiscount = CustomerPalletDiscount;
                    }
                    else if (CustomerItemDiscount != 0)
                    {
                        AppliedDiscount = CustomerItemDiscount;
                    }
                    else if (CustomerBaseDiscount != 0)
                    {
                        AppliedDiscount = CustomerBaseDiscount;
                    }
                }

                //3. Do we have more than a pallet, but not an exact number of pallets, and is the PO price is NOT the same as the pallet price?
                if (NumPallet > 0 && LooseItems > 0 && ItemRate != PalletBasePrice)
                {
                    //Adjust qty to superior pallet
                    AdjustedQty = ItemQuantity;
                    AdjustedItemPrice = ItemBasePrice;

                    if (CustomerItemDiscount != 0)
                    {
                        AppliedDiscount = CustomerItemDiscount;
                    }
                    else if (CustomerBaseDiscount != 0)
                    {
                        AppliedDiscount = CustomerBaseDiscount;
                    }
                }

                //4. Do we have less than a pallet?
                if (ItemQuantity < QtyPerPallet)
                {
                    AdjustedQty = ItemQuantity;
                    AdjustedItemPrice = ItemBasePrice;

                    if (CustomerItemDiscount != 0)
                    {
                        AppliedDiscount = CustomerItemDiscount;
                    }
                    else if (CustomerBaseDiscount != 0)
                    {
                        AppliedDiscount = CustomerBaseDiscount;
                    }

                }

            }

            AdjustedItemPrice = Math.Round(AdjustedItemPrice * (1M - AppliedDiscount), 2);

            if (ItemRate != AdjustedItemPrice)
            {
                ItemSup += "(1) ";

                Messages.Add(new Message { Text = string.Format("<STRONG style='color:red'><sup>1</sup> " + Resources.PriceDiff + "</STRONG>", ItemLineId, AdjustedItemPrice, ItemRate), Severity = Severity.Warning, Scope = Scope.Customer });
            }

            AdjustedItemTotal = Math.Round(AdjustedItemPrice * (AdjustedQty / ItemUnitConversion), 2);

        }

        private int? GetItemId()
        {
            //Verify if product code passed in EDI is valid.
            //

            MySqlCommand cmd;
            object result;

            int? Id1 = null;
            int? Id2 = null;

            //Check if EL product code was empty in EDI. If not empty, use it. If empty, create validation message
            if (!string.IsNullOrEmpty(ItemId))
            {
                cmd = DB_VIVA.conn.CreateCommand();
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT ident FROM ivprod WHERE ident > 0 AND code = ?code AND (idclient = 11173 OR idclient = ?arclient_ident)";  //11173 is Id of Enveloppes Laurentides
                cmd.Parameters.AddWithValue("?code", ItemId);
                cmd.Parameters.AddWithValue("?arclient_ident", arclient_ident);

                result = cmd.ExecuteScalar();

                if (result != DBNull.Value && result != null)
                    Id1 = (int?)result ?? null;

                if (!Id1.HasValue)
                {
                    // return Id;

                    ItemSup += "(2) ";
                    //Product has not been found in ivprod, we must now try to find it in ivproxdcli
                    Messages.Add(new Message { Text = $"<STRONG style='color:red'><sup>2</sup>Item {ItemLineId}: {Resources.ProdNotFound} [{ItemId}] </STRONG>", Severity = Severity.Warning, Scope = Scope.Internal });
                }
            }
            else
            {
                ItemSup += "(3) ";
                Messages.Add(new Message { Text = $"<STRONG style='color:red'><sup>3</sup>Item {ItemLineId}: {Resources.ProdCodeEmpty}</STRONG>", Severity = Severity.Warning, Scope = Scope.Internal });
            }

            if (!string.IsNullOrEmpty(CustomerItemId))
            {
                cmd = DB_VIVA.conn.CreateCommand();
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT idprod FROM ivprixdcli WHERE idclient = ?arclient_ident AND codecli = ?codecli";
                cmd.Parameters.AddWithValue("?arclient_ident", arclient_ident);
                cmd.Parameters.AddWithValue("?codecli", CustomerItemId);
                result = cmd.ExecuteScalar();

                if (result != DBNull.Value && result != null)
                    Id2 = (int?)result ?? null;

                if (Id2.HasValue)
                {
                    cmd = DB_VIVA.conn.CreateCommand();
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = "SELECT code FROM ivprod WHERE ident = ?id";
                    cmd.Parameters.AddWithValue("?id", Id2.Value);

                    result = cmd.ExecuteScalar();

                    if (result != DBNull.Value && result != null)
                        ELProdCode = Convert.ToString(result);
                    else
                        ELProdCode = string.Empty;
                }
                else
                {
                    ItemSup += "(4) ";
                    Messages.Add(new Message { Text = $"<STRONG style='color:red'><sup>4</sup>Item {ItemLineId}: {Resources.ELCodeNotFound}: [{CustomerItemId}] </STRONG>", Severity = Severity.Warning, Scope = Scope.Customer });
                }
            }
            else
            {
                ItemSup += "(6) ";
                Messages.Add(new Message { Text = $"<STRONG style='color:red'><sup>6</sup>Item {ItemLineId}: {Resources.ProdCustCodeEmpty}</STRONG>", Severity = Severity.Warning, Scope = Scope.Internal });
            }
            // KJ: 2018-12-12: Verify if both Id's match
            if (Id1 != null && Id2 != null && Id1 != Id2)
            {
                ItemSup += "(5) ";
                Messages.Add(new Message { Text = $"<STRONG style='color:red'><sup>5</sup>Item {ItemLineId}: {Resources.ProdCodeNoMatch}: [{ItemId} / {ELProdCode}] / [{CustomerItemId}] </STRONG>", Severity = Severity.Warning, Scope = Scope.Customer });
            }

            if (Id1 == null) return Id2;
            else             return Id1;
        }
    }
}
