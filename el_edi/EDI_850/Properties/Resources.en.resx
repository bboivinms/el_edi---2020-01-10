<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Code" xml:space="preserve">
    <value>Product code</value>
  </data>
  <data name="CustBTNotFound" xml:space="preserve">
    <value>Can't determine Customer's Bill To address for Customer </value>
  </data>
  <data name="CustSTNotFound" xml:space="preserve">
    <value>Can't determine Customer's Ship To address for Customer </value>
  </data>
  <data name="CustVal" xml:space="preserve">
    <value>From Customer data validation</value>
  </data>
  <data name="Desc" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DiscountNotFound" xml:space="preserve">
    <value>Can't determine customer discount. Discount has been set to 0%</value>
  </data>
  <data name="ELCodeNotFound" xml:space="preserve">
    <value>Could not determine the Enveloppes Laurentides product ident from Customer product code</value>
  </data>
  <data name="EmailHeader" xml:space="preserve">
    <value>Validation results for Purchase Order # </value>
  </data>
  <data name="EmptyPO" xml:space="preserve">
    <value>Empty PO Number received from EDI</value>
  </data>
  <data name="ExternalEmailSubject" xml:space="preserve">
    <value>Customer EDI mail</value>
  </data>
  <data name="InternalEmailSubject" xml:space="preserve">
    <value>Order desk EDI mail</value>
  </data>
  <data name="InvalidCustId" xml:space="preserve">
    <value>Invalid Customer Id</value>
  </data>
  <data name="ItemVal" xml:space="preserve">
    <value>From Order Items data validation</value>
  </data>
  <data name="OrderVal" xml:space="preserve">
    <value>From Order data validation</value>
  </data>
  <data name="PalletQtyZero" xml:space="preserve">
    <value>The pallet qty is at zero. Please validate.</value>
  </data>
  <data name="PODateMismatch" xml:space="preserve">
    <value>PO Date doesn't match the date the EDI message was received for PO Number</value>
  </data>
  <data name="PODateToday" xml:space="preserve">
    <value>is equal to today's date. Please verify if real urgency</value>
  </data>
  <data name="POInPast" xml:space="preserve">
    <value>is in the past. Please verify with customer</value>
  </data>
  <data name="POReqDate" xml:space="preserve">
    <value>Requested date in PO</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceDiff" xml:space="preserve">
    <value>Item {0}: The price for this item is different from our price. Using price {1:C2 instead of {2:C2}</value>
  </data>
  <data name="PriceNotFound" xml:space="preserve">
    <value>Can't determine the price for this item. Price has been set to $0.00</value>
  </data>
  <data name="ProdCode" xml:space="preserve">
    <value>Product code</value>
  </data>
  <data name="ProdNotFound" xml:space="preserve">
    <value>The item has not been found using the Enveloppes Laurentides code supplied by the client</value>
  </data>
  <data name="Quant" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="ReqShipDate" xml:space="preserve">
    <value>Requested shipping date</value>
  </data>
  <data name="ShipTo" xml:space="preserve">
    <value>Delivery address</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="UseBT" xml:space="preserve">
    <value>Using Bill to address</value>
  </data>
  <data name="PalletPriceNotFound" xml:space="preserve">
    <value>The pallet price is zero. Please validate.</value>
  </data>
  <data name="NewSTAddress" xml:space="preserve">
    <value>The new adress is:</value>
  </data>
  <data name="ProdCodeEmpty" xml:space="preserve">
    <value>The Enveloppes Laurentides code was not sent by the client</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="ItemStatusNotFound" xml:space="preserve">
    <value>Not found</value>
  </data>
  <data name="ItemStatusNotInStock" xml:space="preserve">
    <value>Not in stock</value>
  </data>
  <data name="CustomerItemId" xml:space="preserve">
    <value>Client code</value>
  </data>
  <data name="ProdCodeNoMatch" xml:space="preserve">
    <value>The item corresponding to the Enveloppes Laurentide code does not match the item found by the client code</value>
  </data>
  <data name="ProdCustCodeEmpty" xml:space="preserve">
    <value>The customer code was not sent by the client</value>
  </data>
</root>