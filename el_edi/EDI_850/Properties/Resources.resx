<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Code" xml:space="preserve">
    <value>Code produit</value>
  </data>
  <data name="CustBTNotFound" xml:space="preserve">
    <value>Impossible de déterminer l'adresse de facturation pour le client </value>
  </data>
  <data name="CustSTNotFound" xml:space="preserve">
    <value>Impossible de déterminer l'adresse de livraison pour le client </value>
  </data>
  <data name="CustVal" xml:space="preserve">
    <value>De la validation des données du client</value>
  </data>
  <data name="Desc" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DiscountNotFound" xml:space="preserve">
    <value>Impossible de déterminer l'escompte du client. L'escompte a été mis à 0%</value>
  </data>
  <data name="ELCodeNotFound" xml:space="preserve">
    <value>Il n'a pas été possible de déterminer le No. de produit d'Enveloppes Laurentides à partir du code du client</value>
  </data>
  <data name="EmailHeader" xml:space="preserve">
    <value>Résultats de validation pour bon de commande #</value>
  </data>
  <data name="EmptyPO" xml:space="preserve">
    <value># de commande vide dans fichier EDI</value>
  </data>
  <data name="ExternalEmailSubject" xml:space="preserve">
    <value>Courriel EDI pour client</value>
  </data>
  <data name="InternalEmailSubject" xml:space="preserve">
    <value>Courriel EDI pour bureau des commandes</value>
  </data>
  <data name="InvalidCustId" xml:space="preserve">
    <value>No. Id client invalide</value>
  </data>
  <data name="ItemVal" xml:space="preserve">
    <value>De la validation des données des items de la commande</value>
  </data>
  <data name="OrderVal" xml:space="preserve">
    <value>De la validation des données de la commande</value>
  </data>
  <data name="PalletQtyZero" xml:space="preserve">
    <value>La qté palette est à zéro. SVP valider.</value>
  </data>
  <data name="PODateMismatch" xml:space="preserve">
    <value>La date du bon de commande ne correspond pas à la date de réception EDI</value>
  </data>
  <data name="PODateToday" xml:space="preserve">
    <value>correspond à la date d'aujourd'hui. SVP valider si urgence</value>
  </data>
  <data name="POInPast" xml:space="preserve">
    <value>est une date passée. SVP vérifier avec le client</value>
  </data>
  <data name="POReqDate" xml:space="preserve">
    <value>La date requise dans la commande</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Prix</value>
  </data>
  <data name="PriceDiff" xml:space="preserve">
    <value>Item {0}: Le prix pour cet item est différent de notre prix. Nous utilisons {1:C2} au lieu de {2:C2}</value>
  </data>
  <data name="PriceNotFound" xml:space="preserve">
    <value>Impossible de déterminer le prix de cet item. Le prix a été mis à $0.00</value>
  </data>
  <data name="ProdCode" xml:space="preserve">
    <value>Le code de produit</value>
  </data>
  <data name="ProdNotFound" xml:space="preserve">
    <value>L'item n'a pas été trouvé avec le code d'Enveloppes Laurentides fourni par le client</value>
  </data>
  <data name="Quant" xml:space="preserve">
    <value>Qté</value>
  </data>
  <data name="ReqShipDate" xml:space="preserve">
    <value>Date d'expédition requise</value>
  </data>
  <data name="ShipTo" xml:space="preserve">
    <value>Adresse de livraison</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>Français (défaut)</value>
  </data>
  <data name="UseBT" xml:space="preserve">
    <value>utilisation de l'adresse de facturation</value>
  </data>
  <data name="PalletPriceNotFound" xml:space="preserve">
    <value>Le prix de palette est zéro. SVP valider.</value>
  </data>
  <data name="NewSTAddress" xml:space="preserve">
    <value>La nouvelle addresse est:</value>
  </data>
  <data name="ProdCodeEmpty" xml:space="preserve">
    <value>Le code d'Enveloppes Laurentides n'est pas fourni par le client</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Statut</value>
  </data>
  <data name="ItemStatusNotFound" xml:space="preserve">
    <value>Pas retouvée</value>
  </data>
  <data name="ItemStatusNotInStock" xml:space="preserve">
    <value>Manque inventaire</value>
  </data>
  <data name="CustomerItemId" xml:space="preserve">
    <value>Code client</value>
  </data>
  <data name="ProdCodeNoMatch" xml:space="preserve">
    <value>L'item du code d'Enveloppes Laurentides ne correspond pas a l'item du code client</value>
  </data>
  <data name="ProdCustCodeEmpty" xml:space="preserve">
    <value>Le code client n'est pas fourni par le client</value>
  </data>
</root>